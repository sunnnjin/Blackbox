//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Blackbox {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class AppResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AppResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Blackbox.AppResources", typeof(AppResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Beijing, China
        ///Designer: Sun Jinbo
        ///Email: sunjinbo@hotmail.com.
        /// </summary>
        public static string AboutAuthorText {
            get {
                return ResourceManager.GetString("AboutAuthorText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About Black-box™.
        /// </summary>
        public static string AboutBlackboxText {
            get {
                return ResourceManager.GetString("AboutBlackboxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Black-box™ for Windows Phone 7
        ///Version 01.01.00
        ///Copyright © 2011-2012 by Panda Work Studio
        ///All rights reserved..
        /// </summary>
        public static string AboutContentText {
            get {
                return ResourceManager.GetString("AboutContentText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About.
        /// </summary>
        public static string AboutPageTitle {
            get {
                return ResourceManager.GetString("AboutPageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All at once.
        /// </summary>
        public static string AllAtOnceText {
            get {
                return ResourceManager.GetString("AllAtOnceText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All at a time.
        /// </summary>
        public static string AllAtTimeText {
            get {
                return ResourceManager.GetString("AllAtTimeText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BLACK-BOX™.
        /// </summary>
        public static string ApplicationTitle {
            get {
                return ResourceManager.GetString("ApplicationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Challenge.
        /// </summary>
        public static string ChallengeText {
            get {
                return ResourceManager.GetString("ChallengeText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The above ray gets deflected by the first mirror, then by the second mirror, and then hits the third mirror, yielding a hit; we called it a &quot;Complex hit&quot;..
        /// </summary>
        public static string ComplexHitHelpItemDetailsText {
            get {
                return ResourceManager.GetString("ComplexHitHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Complex hit.
        /// </summary>
        public static string ComplexHitHelpItemTitleText {
            get {
                return ResourceManager.GetString("ComplexHitHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reflections and hits can be more complex, too..
        /// </summary>
        public static string ComplexSampleHelpItemDetailsText {
            get {
                return ResourceManager.GetString("ComplexSampleHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Complex sample.
        /// </summary>
        public static string ComplexSampleHelpItemTitleText {
            get {
                return ResourceManager.GetString("ComplexSampleHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to debunk.
        /// </summary>
        public static string DebunkApplicationBarText {
            get {
                return ResourceManager.GetString("DebunkApplicationBarText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interaction resulting from a ray which does not actually hit a mirror, but which passes directly to one side of the mirror is called a &quot;deflection&quot;. The angle of deflection for this ray/mirror interaction is 90 degrees..
        /// </summary>
        public static string DeflectionHelpItemDetailsText {
            get {
                return ResourceManager.GetString("DeflectionHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deflection.
        /// </summary>
        public static string DeflectionHelpItemTitleText {
            get {
                return ResourceManager.GetString("DeflectionHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rays that don&apos;t result in hits or reflections are called &quot;detours&quot;. These may be single or multiple deflections, or misses. A detour has an entry and an exit location, while hits and reflections only have an entry location for a hit, and a single entry/exit location for a reflection..
        /// </summary>
        public static string DetourHelpItemDetailsText {
            get {
                return ResourceManager.GetString("DetourHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detour.
        /// </summary>
        public static string DetourHelpItemTitleText {
            get {
                return ResourceManager.GetString("DetourHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Difficulty.
        /// </summary>
        public static string DifficultyTitle {
            get {
                return ResourceManager.GetString("DifficultyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The other circumstance leading to a reflection is when two deflections cancel out. Rays that goes between two mirrors placed at the distance of one grid from each other will be turned around - deflected by 180 degrees..
        /// </summary>
        public static string DoubleDeflectionHelpItemDetailsText {
            get {
                return ResourceManager.GetString("DoubleDeflectionHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Double deflection.
        /// </summary>
        public static string DoubleDeflectionHelpItemTitleText {
            get {
                return ResourceManager.GetString("DoubleDeflectionHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Easy.
        /// </summary>
        public static string EasyText {
            get {
                return ResourceManager.GetString("EasyText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Congratulations, my friend, you won!.
        /// </summary>
        public static string GameOverPrompt1Text {
            get {
                return ResourceManager.GetString("GameOverPrompt1Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You guessed all hidden mirrors,  amazing!.
        /// </summary>
        public static string GameOverPrompt2Text {
            get {
                return ResourceManager.GetString("GameOverPrompt2Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game over, would you want a rematch?.
        /// </summary>
        public static string GameOverPrompt3Text {
            get {
                return ResourceManager.GetString("GameOverPrompt3Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Looks like you win after all, congratulations..
        /// </summary>
        public static string GameOverPrompt4Text {
            get {
                return ResourceManager.GetString("GameOverPrompt4Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OK, you win..
        /// </summary>
        public static string GameOverPrompt5Text {
            get {
                return ResourceManager.GetString("GameOverPrompt5Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game.
        /// </summary>
        public static string GamePageTitle {
            get {
                return ResourceManager.GetString("GamePageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to guess.
        /// </summary>
        public static string GuessApplicationBarText {
            get {
                return ResourceManager.GetString("GuessApplicationBarText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Don&apos;t worry about it..
        /// </summary>
        public static string GuessFailedPrompt1Text {
            get {
                return ResourceManager.GetString("GuessFailedPrompt1Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Never lose heart, be patient..
        /// </summary>
        public static string GuessFailedPrompt2Text {
            get {
                return ResourceManager.GetString("GuessFailedPrompt2Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Think much, and then guess..
        /// </summary>
        public static string GuessFailedPrompt3Text {
            get {
                return ResourceManager.GetString("GuessFailedPrompt3Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Don&apos;t lose heart, try again..
        /// </summary>
        public static string GuessFailedPrompt4Text {
            get {
                return ResourceManager.GetString("GuessFailedPrompt4Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keep your chin up..
        /// </summary>
        public static string GuessFailedPrompt5Text {
            get {
                return ResourceManager.GetString("GuessFailedPrompt5Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wonderful, good job for you!.
        /// </summary>
        public static string GuessSuccessPrompt1Text {
            get {
                return ResourceManager.GetString("GuessSuccessPrompt1Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Well done, you guessed right..
        /// </summary>
        public static string GuessSuccessPrompt2Text {
            get {
                return ResourceManager.GetString("GuessSuccessPrompt2Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You made a great guess, how nice!.
        /// </summary>
        public static string GuessSuccessPrompt3Text {
            get {
                return ResourceManager.GetString("GuessSuccessPrompt3Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I don&apos;t know how you do it, awesome!.
        /// </summary>
        public static string GuessSuccessPrompt4Text {
            get {
                return ResourceManager.GetString("GuessSuccessPrompt4Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keep going untill you win..
        /// </summary>
        public static string GuessSuccessPrompt5Text {
            get {
                return ResourceManager.GetString("GuessSuccessPrompt5Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Guess type.
        /// </summary>
        public static string GuessTypeTitle {
            get {
                return ResourceManager.GetString("GuessTypeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to help.
        /// </summary>
        public static string HelpApplicationBarText {
            get {
                return ResourceManager.GetString("HelpApplicationBarText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help.
        /// </summary>
        public static string HelpPageTitle {
            get {
                return ResourceManager.GetString("HelpPageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A ray which hits a mirror will be absorbed (it will not come outside the box)..
        /// </summary>
        public static string HitHelpItemDetailsText {
            get {
                return ResourceManager.GetString("HitHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hit.
        /// </summary>
        public static string HitHelpItemTitleText {
            get {
                return ResourceManager.GetString("HitHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Black-box™ is a game of &quot;hide and seek&quot;, which simulates shooting rays into a black box to deduce the locations of mirrors hidden inside. It was created by Eric Solomon in 1970s. Currently it has numerous computer implementations for many different platforms, perhaps this one is the first on Windows Phone platform,  hope you like it..
        /// </summary>
        public static string IntroductionHelpItemDetailsText {
            get {
                return ResourceManager.GetString("IntroductionHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Introduction.
        /// </summary>
        public static string IntroductionHelpItemTitleText {
            get {
                return ResourceManager.GetString("IntroductionHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The most common configuration for novice players is four mirrors in an 8-by-8 grid. The above is a sample black-box in this configuration.
        ///There are 32 input positions in an 8-by-8 grid, eight each at the top, bottom, right, and left. A beam is fired into one of these positions and the result is used to help deduce the location of a known number of hidden mirrors..
        /// </summary>
        public static string LayoutHelpItemDetailsText {
            get {
                return ResourceManager.GetString("LayoutHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Layout.
        /// </summary>
        public static string LayoutHelpItemTitleText {
            get {
                return ResourceManager.GetString("LayoutHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have no more rays to shoot!.
        /// </summary>
        public static string MaxRaysExceedPromptText {
            get {
                return ResourceManager.GetString("MaxRaysExceedPromptText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of mirrors.
        /// </summary>
        public static string MirrorNumberTitle {
            get {
                return ResourceManager.GetString("MirrorNumberTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A ray which doesn&apos;t come across with any mirror will go straight through the box..
        /// </summary>
        public static string MissHelpItemDetailsText {
            get {
                return ResourceManager.GetString("MissHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Miss.
        /// </summary>
        public static string MissHelpItemTitleText {
            get {
                return ResourceManager.GetString("MissHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to next.
        /// </summary>
        public static string NextApplicationBarText {
            get {
                return ResourceManager.GetString("NextApplicationBarText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need to shoot a ray first!.
        /// </summary>
        public static string NoRayExploredPromptText {
            get {
                return ResourceManager.GetString("NoRayExploredPromptText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Off.
        /// </summary>
        public static string OffText {
            get {
                return ResourceManager.GetString("OffText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ok.
        /// </summary>
        public static string OkApplicationBarText {
            get {
                return ResourceManager.GetString("OkApplicationBarText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to On.
        /// </summary>
        public static string OnText {
            get {
                return ResourceManager.GetString("OnText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to previous.
        /// </summary>
        public static string PreviousApplicationBarText {
            get {
                return ResourceManager.GetString("PreviousApplicationBarText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The final type of interaction of a ray with an atom is a &quot;reflection&quot;. This occurs in two circumstances. If a mirror is at the edge of the grid, any ray which is aimed into the grid directly beside it causes a reflection..
        /// </summary>
        public static string ReflectionHelpItemDetailsText {
            get {
                return ResourceManager.GetString("ReflectionHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reflection.
        /// </summary>
        public static string ReflectionHelpItemTitleText {
            get {
                return ResourceManager.GetString("ReflectionHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to restart.
        /// </summary>
        public static string RestartApplicationBarText {
            get {
                return ResourceManager.GetString("RestartApplicationBarText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to settings.
        /// </summary>
        public static string SettingsApplicationBarText {
            get {
                return ResourceManager.GetString("SettingsApplicationBarText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        public static string SettingsPageTitle {
            get {
                return ResourceManager.GetString("SettingsPageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sound.
        /// </summary>
        public static string SoundTitle {
            get {
                return ResourceManager.GetString("SoundTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Let&apos;s get started!.
        /// </summary>
        public static string StartText {
            get {
                return ResourceManager.GetString("StartText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In the game, 3 to 5 mirrors (depending on how many you choose when starting the game) are hidden in an 8-by-8 grid. You supply inputs in the form of &quot;rays&quot; that you &quot;shoot&quot; into the sides of the grid. Because these rays behave according to deterministic rules when in the vicinity of a mirror within the grid, you can deduce the locations of the mirrors given their observed behavior. The object of the game is to accurately guess the location of the hidden mirrors using the least amount of information..
        /// </summary>
        public static string TargetHelpItemDetailsText {
            get {
                return ResourceManager.GetString("TargetHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object of the game.
        /// </summary>
        public static string TargetHelpItemTitleText {
            get {
                return ResourceManager.GetString("TargetHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Watch out! Ray could be deflected by several mirrors. Some rays travel a twisted course, like the above ray..
        /// </summary>
        public static string TwistHelpItemDetailsText {
            get {
                return ResourceManager.GetString("TwistHelpItemDetailsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Twist.
        /// </summary>
        public static string TwistHelpItemTitleText {
            get {
                return ResourceManager.GetString("TwistHelpItemTitleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow unlimited rays.
        /// </summary>
        public static string UnlimitedRaysTitle {
            get {
                return ResourceManager.GetString("UnlimitedRaysTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vibrate.
        /// </summary>
        public static string VibrateTitle {
            get {
                return ResourceManager.GetString("VibrateTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The purpose of the game is to use deductive reasoning to determine the location of 3 to 5 &apos;mirrors&apos; placed unseen within an 8-by-8 grid. For more information, please refer to the Help..
        /// </summary>
        public static string WelcomeAddressText {
            get {
                return ResourceManager.GetString("WelcomeAddressText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Welcome.
        /// </summary>
        public static string WelcomePageTitle {
            get {
                return ResourceManager.GetString("WelcomePageTitle", resourceCulture);
            }
        }
    }
}
